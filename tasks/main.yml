---
# Install AWS FPGA runtime libraries and Utilities
# And eventually install extra FPGA driver as kernel module

- name: Get "/usr/local/lib64" directory information
  stat:
    path: /usr/local/lib64
  register: usr_local_lib64

- name: Get "libfpga_mgmt.so" file information
  stat:
    path: "/usr/local/{{ usr_local_lib64.stat.exists |
           ternary('lib64','lib') }}/libfpga_mgmt.so"
  register: libfpga_mgmt

- name: Create AWS FPGA source temporary directory
  tempfile:
    state: directory
    prefix: aws_fpga_
  register: aws_fpga_src
  when: not libfpga_mgmt.stat.exists

- name: Download and extract AWS FPGA release tarbal
  unarchive:
    src: "https://api.github.com/repos/aws/aws-fpga/tarball/\
          {{ aws_fpga_version | default('') }}"
    dest: "{{ aws_fpga_src.path }}"
    remote_src: true
    extra_opts: ['--strip-components=1']
  register: aws_sdk
  retries: 10
  delay: 1
  when: not libfpga_mgmt.stat.exists

- name: Ensure AWS FPGA build dependencies are present
  apt:
    name:
      - build-essential
    state: present
    install_recommends: false
  retries: 10
  delay: 1
  when: ansible_os_family == 'Debian' and not libfpga_mgmt.stat.exists

- name: Ensure AWS FPGA build dependencies are present
  yum:
    name:
      - "@Development tools"
    state: present
    install_weak_deps: false
  retries: 10
  delay: 1
  when: ansible_os_family == 'RedHat' and not libfpga_mgmt.stat.exists

- name: Build and install AWS FPGA libraries and utilities
  shell: "source {{ aws_fpga_src.path }}/sdk_setup.sh;"
  environment:
    AWS_FPGA_ALLOW_NON_ROOT: "{{ aws_fpga_allow_non_root or '' }}"
    AWS_FPGA_SDK_GROUP: "{{ aws_fpga_sdk_group }}"
    AWS_FPGA_SDK_OVERRIDE_GROUP: "{{ aws_fpga_sdk_override_group or '' }}"
  args:
    creates: "/usr/local/{{ usr_local_lib64.stat.exists |
              ternary('lib64','lib') }}/libfpga_mgmt.so"
    executable: /bin/bash
  when: not libfpga_mgmt.stat.exists

- name: Ensure AWS FPGA driver build dependencies are present
  package:
    name:
      - "kernel-devel-{{ ansible_kernel }}"
      - "kernel-headers-{{ ansible_kernel }}"
      - elfutils-libelf-devel
    state: present
  retries: 10
  delay: 1
  when: "aws_fpga_driver != '' and ansible_os_family == 'RedHat' and
         not libfpga_mgmt.stat.exists"

- name: Ensure AWS FPGA driver build dependencies are present
  package:
    name:
      - "linux-headers-{{ ansible_kernel }}"
      - libelf-dev
    state: present
  retries: 10
  delay: 1
  when: "aws_fpga_driver != '' and ansible_os_family == 'Debian' and
         not libfpga_mgmt.stat.exists"

- name: Build and install AWS FPGA driver
  command: "{{ item }}"
  args:
    chdir: "{{ aws_fpga_src.path }}/sdk/linux_kernel_drivers/\
            {{ aws_fpga_driver }}"
  environment:
    # Required for XOCL
    SDACCEL_DIR: "{{ aws_fpga_src.path }}/SDAccel"
  with_items:
    - /usr/bin/make -j
    - /usr/bin/make install
    - "/usr/sbin/modprobe {{ aws_fpga_driver }}"
  when: aws_fpga_driver != '' and not libfpga_mgmt.stat.exists

# Force the use of as specific XRT, because it is the only version that work
- name: Download xrt/xrt-aws packages
  get_url:
    url: "{{ s3_dev_ami_url }}{{ aws_xrt_package }}-{{ item }}.rpm"
    dest: "{{ aws_fpga_src.path }}/{{ aws_xrt_package }}-{{ item }}.rpm"
  with_items:
    - xrt
    - aws
  retries: 10
  delay: 1
  when: (aws_fpga_xrt | bool) and not libfpga_mgmt.stat.exists

- name: Ensure xrt/xrt-aws packages dependencies are present
  package:
    name:
      - "kernel-devel-{{ ansible_kernel }}"
      - "kernel-headers-{{ ansible_kernel }}"
      - epel-release
    state: present
  retries: 10
  delay: 1
  when: (aws_fpga_xrt | bool) and not libfpga_mgmt.stat.exists

- name: Ensure xrt/xrt-aws packages are installed
  yum:
    name: "{{ aws_fpga_src.path }}/{{ aws_xrt_package }}-{{ item }}.rpm"
    state: present
  with_items:
    - xrt
    - aws
  when: (aws_fpga_xrt | bool) and not libfpga_mgmt.stat.exists

- name: Clean up AWS FPGA temporary directory
  file:
    path: "{{ aws_fpga_src.path }}"
    state: absent
  when: not libfpga_mgmt.stat.exists and aws_fpga_src.path is defined
